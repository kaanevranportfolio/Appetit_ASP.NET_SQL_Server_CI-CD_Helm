name: Test, Build, Push, and Deploy to GKE

on:
  push:
    branches: [ master ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  test-build-deploy:
    runs-on: ubuntu-latest
    env:
      GKE_ZONE: ${{ secrets.GKE_ZONE }}
      REGISTRY_REGION: ${{ secrets.REGISTRY_REGION }}
      REGISTRY: ${{ secrets.REGISTRY_REGION }}-docker.pkg.dev
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      REPOSITORY: restaurant-repo
      IMAGE: restaurantmenuapi
      CLUSTER_NAME: restaurant-cluster

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run tests using Docker
      env:
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      run: |
        chmod +x ./run-tests.sh
        ./run-tests.sh

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Enable required APIs
      run: |
        gcloud services enable artifactregistry.googleapis.com
        gcloud services enable container.googleapis.com

    - name: Create Artifact Registry repository
      run: |
        gcloud artifacts repositories create $REPOSITORY \
          --repository-format=docker \
          --location=$REGISTRY_REGION \
          --description="Restaurant Menu API Docker repository" || true

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker $REGISTRY

    - name: Build Docker image
      run: |
        docker build -f Dockerfiles/Dockerfile.backend -t $REGISTRY/$PROJECT_ID/$REPOSITORY/$IMAGE:${{ github.sha }} .

    - name: Push Docker image
      run: |
        docker push $REGISTRY/$PROJECT_ID/$REPOSITORY/$IMAGE:${{ github.sha }}

    - name: Create GKE cluster if not exists
      run: |
        if ! gcloud container clusters describe $CLUSTER_NAME --zone $GKE_ZONE; then
          gcloud container clusters create $CLUSTER_NAME --zone $GKE_ZONE --num-nodes=3
        fi

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials $CLUSTER_NAME --zone $GKE_ZONE

    - name: Install GKE auth plugin
      run: |
        gcloud components install gke-gcloud-auth-plugin --quiet


    - name: Set up Helm
      uses: azure/setup-helm@v4

    # VS Code YAML linter will show errors for the heredoc block below, but this is expected and safe to ignore.
    # The content is written to a file, not parsed as workflow YAML.

    - name: Generate sensitive values.secret.yaml for Restaurant API
      run: |
        echo "db:" > ./helm/restaurantmenuapi/values.secret.yaml
        echo "  user: \"${{ secrets.DB_USER }}\"" >> ./helm/restaurantmenuapi/values.secret.yaml
        echo "  password: \"${{ secrets.DB_PASSWORD }}\"" >> ./helm/restaurantmenuapi/values.secret.yaml
        echo "  name: \"${{ secrets.DB_NAME }}\"" >> ./helm/restaurantmenuapi/values.secret.yaml
        echo "jwt:" >> ./helm/restaurantmenuapi/values.secret.yaml
        echo "  secretKey: \"${{ secrets.JWT_SECRET_KEY }}\"" >> ./helm/restaurantmenuapi/values.secret.yaml
        echo "  issuer: \"${{ secrets.JWT_ISSUER }}\"" >> ./helm/restaurantmenuapi/values.secret.yaml
        echo "  audience: \"${{ secrets.JWT_AUDIENCE }}\"" >> ./helm/restaurantmenuapi/values.secret.yaml
        echo "  expiryMinutes: \"${{ secrets.JWT_EXPIRY_MINUTES }}\"" >> ./helm/restaurantmenuapi/values.secret.yaml
        echo "# Add other sensitive values as needed" >> ./helm/restaurantmenuapi/values.secret.yaml
      shell: bash

    - name: Log generated Restaurant API secret YAML
      run: |
        echo "--- GENERATED ./helm/restaurantmenuapi/values.secret.yaml ---"
        cat ./helm/restaurantmenuapi/values.secret.yaml
        echo "--- END OF FILE ---"

    # VS Code YAML linter will show errors for the heredoc block below, but this is expected and safe to ignore.
    # The content is written to a file, not parsed as workflow YAML.

    - name: Generate sensitive values.secret.yaml for SQL Server
      run: |
        echo "mssql:" > ./helm/sqlserver/values.secret.yaml
        echo "  saPassword: \"${{ secrets.DB_PASSWORD }}\"" >> ./helm/sqlserver/values.secret.yaml
        echo "  dbName: \"${{ secrets.DB_NAME }}\"" >> ./helm/sqlserver/values.secret.yaml
        echo "  dbUser: \"${{ secrets.DB_USER }}\"" >> ./helm/sqlserver/values.secret.yaml
        echo "  # Add other sensitive values as needed" >> ./helm/sqlserver/values.secret.yaml
      shell: bash


    # - name: Delete existing SQL Server PVC (if exists)
    #   WARNING: Deleting the SQL Server PVC will erase all database data.
    #   This is useful for test/dev/CI environments when you want a clean database,
    #   but should NOT be used in production if you want to retain data.
    #   run: |
    #     kubectl delete pvc sqlserver-pvc --ignore-not-found

    - name: Deploy SQL Server with Helm
      run: |
        helm upgrade --install sqlserver ./helm/sqlserver \
          -f ./helm/sqlserver/values.secret.yaml

    - name: Wait for SQL Server pod to be ready
      run: |
        echo "⏳ Waiting for SQL Server pod to be ready..."
        kubectl wait --for=condition=ready --timeout=300s pod -l app=sqlserver
        echo "✅ SQL Server pod is ready!"

    - name: Deploy Restaurant API with Helm
      run: |
        helm upgrade --install restaurantmenuapi ./helm/restaurantmenuapi \
          --set image.repository=$REGISTRY/$PROJECT_ID/$REPOSITORY/$IMAGE \
          --set image.tag=${{ github.sha }} \
          -f ./helm/restaurantmenuapi/values.secret.yaml

    - name: Debug deployment status (always runs)
      if: always()
      run: |
        echo "🔍 Checking deployment status..."
        kubectl get deployments
        kubectl get pods -l app.kubernetes.io/name=restaurantmenuapi
        kubectl describe deployment restaurantmenuapi
        echo ""
        echo "🔍 Checking pod details..."
        kubectl describe pods -l app.kubernetes.io/name=restaurantmenuapi
        echo ""
        echo "🔍 Checking pod logs (last 50 lines)..."
        kubectl logs -l app.kubernetes.io/name=restaurantmenuapi --tail=50 || echo "No logs available yet"
        echo ""
        echo "🔍 Checking previous pod logs (for crash loops)..."
        for pod in $(kubectl get pods -l app.kubernetes.io/name=restaurantmenuapi -o jsonpath='{.items[*].metadata.name}'); do
          echo "\n--- Previous logs for $pod ---"
          kubectl logs $pod --previous || echo "No previous logs for $pod"
        done

    - name: Wait for deployment to be ready
      run: |
        echo "⏳ Waiting for deployment to be ready (extended timeout)..."
        kubectl wait --for=condition=available --timeout=600s deployment/restaurantmenuapi
        echo "✅ Deployment is ready!"

    - name: Wait for LoadBalancer IP
      run: |
        echo "⏳ Waiting for LoadBalancer to get external IP..."
        for i in {1..30}; do
          EXTERNAL_IP=$(kubectl get service restaurantmenuapi -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          if [ ! -z "$EXTERNAL_IP" ]; then
            echo "✅ External IP: $EXTERNAL_IP"
            echo "EXTERNAL_IP=$EXTERNAL_IP" >> $GITHUB_ENV
            break
          fi
          echo "⏳ Still waiting for IP... (attempt $i/30)"
          sleep 10
        done
        if [ -z "$EXTERNAL_IP" ]; then
          echo "❌ Failed to get external IP after 5 minutes"
          exit 1
        fi

    - name: Display access URLs
      run: |
        echo "🎯 Your Restaurant API is now live!"
        echo ""
        echo "📋 Swagger UI: http://$EXTERNAL_IP"
        echo "🔗 Health Check: http://$EXTERNAL_IP/health"
        echo "🍽️ Menu API: http://$EXTERNAL_IP/api/menu"
        echo "📅 Reservations API: http://$EXTERNAL_IP/api/reservations"
        echo ""
        echo "🌐 You can visit these URLs in your browser!"

    - name: Install load testing tool
      run: |
        echo "📦 Installing hey load testing tool..."
        wget -O hey https://hey-release.s3.us-east-2.amazonaws.com/hey_linux_amd64
        chmod +x hey
        sudo mv hey /usr/local/bin/

    - name: Check initial HPA and pod status
      run: |
        echo "📊 Initial cluster status:"
        kubectl get hpa
        kubectl get pods -l app.kubernetes.io/name=restaurantmenuapi
        echo ""

    - name: Run load test and monitor HPA scaling
      run: |
        echo "🔥 Starting load test against http://$EXTERNAL_IP"
        echo "Target: CPU > 40%, Memory > 50%"
        echo ""
        
        # Start load test in background
        hey -z 3m -c 20 -q 10 http://$EXTERNAL_IP/health &
        LOAD_TEST_PID=$!
        
        echo "📊 Monitoring HPA scaling for 3 minutes..."
        for i in {1..18}; do
          echo "--- Check $i (every 10s) ---"
          kubectl get hpa restaurantmenuapi --no-headers | awk '{printf "HPA: %s/%s replicas, CPU: %s, Memory: %s\n", $7, $8, $3, $4}'
          kubectl get pods -l app.kubernetes.io/name=restaurantmenuapi --no-headers | wc -l | awk '{printf "Pod count: %s\n", $1}'
          echo ""
          sleep 10
        done
        
        # Wait for load test to complete
        wait $LOAD_TEST_PID
        echo "✅ Load test completed!"

    - name: Monitor scale down behavior
      run: |
        echo "📉 Monitoring scale down (waiting 5 minutes)..."
        for i in {1..30}; do
          echo "--- Scale down check $i (every 10s) ---"
          kubectl get hpa restaurantmenuapi --no-headers | awk '{printf "HPA: %s/%s replicas, CPU: %s, Memory: %s\n", $7, $8, $3, $4}'
          kubectl get pods -l app.kubernetes.io/name=restaurantmenuapi --no-headers | wc -l | awk '{printf "Pod count: %s\n", $1}'
          echo ""
          sleep 10
        done

    - name: Final HPA test results
      run: |
        echo "🎯 Final HPA Test Results:"
        kubectl get hpa restaurantmenuapi
        kubectl get pods -l app.kubernetes.io/name=restaurantmenuapi
        kubectl describe hpa restaurantmenuapi
        echo ""
        echo "✅ HPA load testing completed successfully!"
